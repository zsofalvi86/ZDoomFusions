Class DSS_SeriousPlayer : DoomPlayer
{
	double tilt; double desiredTilt;
	const maxtilt = 1.4;
	int tic;
	bool zoom;

	Override void Tick ()
	{
		Super.Tick();
		if (!player || !player.mo || player.mo != self){return;}
		
		int insm = GetPlayerInput(MODINPUT_SIDEMOVE);

		bool left = insm < -1000;
		bool right = insm > 1000;
		
		zoom = CountInv("DSS_SniperZoom");
		
		Crosshair();
		SetTilt(left, right);
		Timer();
		PerHalfSec();
		SeriousSpeedZoom();
	}
	
	void Crosshair()
	{
		if (!zoom)
		{
			let bobdelta = player.viewz - pos.Z - player.viewheight;
		
			FTranslatedLineTarget hit;
			LineAttack(angle, 9999, pitch, 0, 'Normal', "DSS_InvisCrosshair", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT,hit,5+bobdelta);
			if(hit.linetarget)
			{
				double ratio = double(hit.linetarget.health) / hit.linetarget.GetSpawnHealth();
				if (ratio < 0.33) {LineAttack(angle, 256, pitch, 0, 'Normal', "DSS_RedCrosshair", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT,null,5+bobdelta);}
				else if (ratio < 0.66) {LineAttack(angle, 256, pitch, 0, 'Normal', "DSS_YellowCrosshair", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT,null,5+bobdelta);}
				else {LineAttack(angle, 256, pitch, 0, 'Normal', "DSS_GreenCrosshair", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT,null,5+bobdelta);}
			}
			else {LineAttack(angle, 256, pitch, 0, 'Normal', "DSS_NeutralCrosshair", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT,null,5+bobdelta);}
		}
	}
	
	void SetTilt(bool left, bool right)
	{
		if (left && !right) {desiredTilt = -maxtilt;}
		else if (right && !left) {desiredTilt = maxtilt;}
		else {desiredTilt = 0;}
		if(tilt < desiredTilt) {tilt += 0.2;}
		if(tilt > desiredTilt) {tilt -= 0.2;}
		A_SetRoll(tilt);//,SPF_INTERPOLATE);
		//A_Print("t: "..tilt);
	}
	
	void Timer()
	{
		if (tic <= 0) {tic = 35;}
		else {tic--;}
	}
	
	void PerHalfSec()
	{
		if (tic == 0 || tic == 18)
		{
			let sspeed = Powerup(FindInventory("PowerSpeedSS"));
			let sdamage = Powerup(FindInventory("PowerSeriousDamage"));
			let sinvul = Powerup(FindInventory("PowerInvulnerableSam"));
			if ((sspeed != null && sspeed.EffectTics < 300) ||
				(sdamage != null && sdamage.EffectTics < 300) ||
				(sinvul != null && sinvul.EffectTics < 300))
			{ A_PlaySound("items/powerup/fadewarn",5); }
		}
	}
	
	void SeriousSpeedZoom()
	{
		let sspeed = Powerup(FindInventory("PowerSpeedSS"));
		if (sspeed != null && !zoom)
		{
			player.FOV = player.DesiredFOV * 1.3;
		}
	}
	
	Override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		if(CheckInventory("PowerSpeedSS",1) && inflictor && inflictor.GetClassName() == "BulletPuff") 
		{
			return Super.TakeSpecialDamage(inflictor, source, damage * 0.5, damagetype);
		}
		return Super.TakeSpecialDamage(inflictor, source, damage, damagetype);;
	}

	Default
	{
		Mass 100;
		PainChance 255;
		Gravity 1.0;
		Species "Player";
		Player.StartItem "DSS_Revolver";
		Player.StartItem "DSS_Knife";
		Player.StartItem "DSS_SamDamageMod";
		Player.DisplayName "Serious Sam";
		Player.SoundClass "DSS_SeriousPlayer";
		
		Player.WeaponSlot 1, "DSS_Knife", "DSS_Chainsaw";
		Player.WeaponSlot 2, "DSS_Revolver", "DSS_Revolvers";
		Player.WeaponSlot 3, "DSS_Shotgun", "DSS_CoachGun";
		Player.WeaponSlot 4, "DSS_TommyGun", "DSS_MiniGun";
		Player.WeaponSlot 5, "DSS_GrenadeLauncher", "DSS_RocketLauncher";
		Player.WeaponSlot 6, "DSS_LaserGun", "DSS_Flamethrower";
		Player.WeaponSlot 7, "DSS_SniperRifle";
		Player.WeaponSlot 8, "DSS_Devastator", "DSS_Cannon";
		Player.WeaponSlot 9, "DSS_SeriousBomb";
		
		DamageFactor "SeriousKnife", 1.0;
		DamageFactor "SeriousSaw", 0.85;
		DamageFactor "SeriousColt", 0.666;
		DamageFactor "SeriousShell", 0.91;
		DamageFactor "SeriousSuperShell", 0.666;
		DamageFactor "SeriousBullet", 0.833;
		DamageFactor "SeriousRocket", 0.71;
		DamageFactor "SeriousGrenade", 0.77;
		DamageFactor "SeriousCell", 0.87;
		DamageFactor "SeriousSniper", 1.0;
		DamageFactor "SeriousFlame", 1.0;
		DamageFactor "SeriousCannon", 0.75;
	}
	
	States
	{
	Spawn:
		PLAY A -1;
		Loop;
	See:
		PLAY ABCD 4;
		Loop;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 6 BRIGHT;
		Goto Missile;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
	Death:
		PLAY H 0 A_PlayerSkinCheck("AltSkinDeath");
	Death1:
		PLAY H 10;
		PLAY I 10 A_PlayerScream();
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 0 A_PlayerSkinCheck("AltSkinXDeath");
	XDeath1:
		PLAY O 5;
		PLAY P 5 A_XScream();
		PLAY Q 5 A_NoBlocking();
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
	AltSkinDeath:
		PLAY H 6;
		PLAY I 6 A_PlayerScream();
		PLAY JK 6;
		PLAY L 6 A_NoBlocking();
		PLAY MNO 6;
		PLAY P -1;
		Stop;
	AltSkinXDeath:
		PLAY Q 5 A_PlayerScream();
		PLAY R 0 A_NoBlocking();
		PLAY R 5 A_SkullPop();
		PLAY STUVWX 5;
		PLAY Y -1;
		Stop;
	}
}
