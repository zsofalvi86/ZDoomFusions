Class DSS_CannonBall : Actor
{
	bool exploding;
	private int damageSpent;
	int countDown;
	int lastspeed;
	int velocity;
	
	override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{	
		if (!exploding)
		{
			if (countDown <= 0) velocity = speed;
			if (velocity < 5) velocity = 5;
			let damageLeft = (velocity * damage) - damageSpent;
			let damageInf = velocity * damage;
			//A_Print("vel: "..velocity.." dmg:"..damage.." dspnt:"..damageSpent);
			if (target.health > damageInf || target.bDontRip)
			{
				Die(self,self);
				//if (damageLeft < 0) return 0;
				return damageInf;
			}
			A_ScaleVelocity(1-target.health*0.0002);
			damageSpent += target.health;
			return damageInf;
		}
		//A_Print("exploding damage:"..damage);
		return Super.DoSpecialDamage(target,damage,damagetype);
	}
	
	//override int SpecialMissileHit(Actor victim)
	//{
	//	if (countDown > 0) return 1; else return -1;
	//}
	
	Action state A_CannonFly()
	{
		invoker.velocity = sqrt(vel.x*vel.x + vel.y*vel.y + vel.z*vel.z);
		A_Explode(20,32,0,0,32);
		A_SpawnItemEx("DSS_CannonTrail",Random(-16,16),Random(-16,16),1,0,0,3,0,0,256-(speed*5));
		A_ScaleVelocity(0.99);
		invoker.countDown--;
		if (invoker.countDown <= 0 || invoker.velocity < 2) {Die(self,self); return ResolveState("Death");}
		if (invoker.velocity < 5) BounceSound = "";
		if (invoker.velocity > 40) {if(invoker.lastspeed==3) return ResolveState(null); else {invoker.lastspeed=3; return ResolveState("Speed3");}}
		if (invoker.velocity > 30) {if(invoker.lastspeed==2) return ResolveState(null); else {invoker.lastspeed=2; return ResolveState("Speed2");}}
		if(invoker.lastspeed==1) return ResolveState(null); else {invoker.lastspeed=1; return ResolveState("Speed1");}
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 {countDown = 225;}
	Speed1:
		CBLP AABBCCBB 1 A_CannonFly();
		Loop;
	Speed2:
		CBLP DDEEDDEEFFEEFFEE 1 bright A_CannonFly();
		Loop;
	Speed3:
		CBLP GGHHGGHHIIHHIIHH 1 bright A_CannonFly();
		Loop;
	Crash:
	Death:
	XDeath:
		TNT1 A 0 A_ChangeVelocity(0,0,0,CVF_RELATIVE|CVF_REPLACE);
		TNT1 A 0 A_NoGravity();
		TNT1 A 0 {exploding = true;}
		TNT1 A 0 A_Explode(25,256,0);
		TNT1 A 0 A_Quake(4,4,0,375,"");
		TNT1 A 0 A_Quake(2,5,0,750,"");
		TNT1 A 0 A_Quake(1,5,0,3200,"");
		BMZP A 4 bright;
		BMZP BCDEF 3 bright;
		Stop;
	}
	
	Default
	{
		Projectile;
		//+USEBOUNCESTATE;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+DONTBOUNCEONSKY;
		+RIPPER;
		+FORCERADIUSDMG;
		-NOGRAVITY;
		-BOUNCEAUTOOFF;
		-BOUNCEAUTOOFFFLOORONLY;
		BounceType "Doom";
		BounceFactor 0.72;
		WallBounceFactor 0.72;
		BounceCount 99;
		Gravity 0.25;
		Radius 13;
		Height 10;
		DamageFunction (20);
		SeeSound "";
		DeathSound "weapons/ssexp";
		BounceSound "weapons/cannonbnc";
	}
}