Class DSS_CannonBall : Actor
{
	bool exploding;
	private int damageSpent;
	int countDown;
	
	override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{	
		if (!exploding)
		{
			let damageLeft = (speed * 20) - damageSpent;
			if (target.health > damageLeft)
			{
				Die(self,self);
				if (damageLeft < 0) return 0;
				return damageLeft;
			}
			damageSpent += target.health;
			return damageLeft;
		}
		return Super.DoSpecialDamage(target,damage,damagetype);
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		return 1; // pass everything
	}
	
	Action state A_CannonFly()
	{
		A_Explode(999,64,0);
		invoker.countDown--;
		if (invoker.countDown <= 0) Die(self,self);
		if (speed < 10) BounceSound = "";
		if (speed > 45) return ResolveState("Speed3");
		if (speed > 35) return ResolveState("Speed2");
		return ResolveState("Speed1");
	}
	
	States
	{
	Spawn:
		TNT1 A 0 {countDown = 350;}
	Speed1:
		CBLP AABBCCBB 1 A_CannonFly();
		Loop;
	Speed2:
		CBLP DDEEDDEEFFEEFFEE 1 A_CannonFly();
		Loop;
	Speed3:
		CBLP GGHHGGHHIIHHIIHH 1 A_CannonFly();
		Loop;
	Crash:
	Death:
	XDeath:
		TNT1 A 0 A_ChangeVelocity(0,0,0,CVF_RELATIVE|CVF_REPLACE);
		TNT1 A 0 {exploding = true;}
		TNT1 A 0 A_Explode(32,256);
		TNT1 A 0 A_Quake(4,4,0,375,"");
		TNT1 A 0 A_Quake(2,5,0,750,"");
		TNT1 A 0 A_Quake(1,5,0,3200,"");
		BMZP A 4 bright;
		BMZP BCDEF 3 bright;
		Stop;
	}
	
	Default
	{
		//+USEBOUNCESTATE;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+DONTBOUNCEONSKY;
		-NOGRAVITY;
		-BOUNCEAUTOOFF;
		-BOUNCEAUTOOFFFLOORONLY;
		BounceType "Doom";
		BounceFactor 0.65;
		WallBounceFactor 0.65;
		BounceCount 99;
		Gravity 0.2;
		SeeSound "";
		DeathSound "";
		BounceSound "weapons/cannonbnc";
	}
}