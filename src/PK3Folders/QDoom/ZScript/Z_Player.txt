Class QD_QuakePlayer : DoomPlayer
{
	double xPos, yPos, zPos;
	int silencedshots;

	double tilt; double desiredTilt; double dmgTilt;
	const maxtilt = 1.8;
	int tic;
	
	Override void Tick ()
	{
		Super.Tick();
		if (!player || !player.mo || player.mo != self){return;}
		
		int insm = GetPlayerInput(MODINPUT_SIDEMOVE);
		bool left = insm < -1000;
		bool right = insm > 1000;
		
		SetTilt(left, right);
		Timer();
		
		if (tic == 0 && self.Health > 0)
		{
			if (CountInv("QD_TempHealthBuffer")) { TakeInventory("QD_TempHealthBuffer", 1); }
			else if (CountInv("QD_TempHealth"))
			{
				let healthtick = CountInv("QD_TempHealthTickers");
				TakeInventory("QD_TempHealth", healthtick);
				if (self.Health > 100 + self.stamina) { A_SetHealth(self.Health-healthtick); }
				else { SetInventory("QD_TempHealth", 0); }
				if (self.Health < 100) { A_SetHealth(100); }
			}
			else
			{
				SetInventory("QD_TempHealthTickers", 0);
			}
		}
	}
	
	Override void Travelled()
	{
		if (self.Health < 50) { A_SetHealth(50); }
		SetInventory("QD_TempHealthBuffer", 0);
		while (CountInv("QD_TempHealth"))
		{
			TakeInventory("QD_TempHealth", 1);
			if (self.Health > 100 + self.stamina) { A_SetHealth(self.Health-1); }
			else { SetInventory("QD_TempHealth", 0); }
		}
		SetInventory("QD_TempHealthTickers", 0);
	}
	
	Override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		let newdamage = damage;
		
		if (source && source == self)
		{
			damage = damage / 2;
		}
		
		dmgTilt += damage / 8.0;
		if (dmgTilt > (maxtilt*4)) {dmgTilt = maxtilt*4;}
		
		if(CheckInventory("PowerPentagram",1)) 
		{
			A_PlaySound("items/invul/absorb",5);
			let uarmor = BasicArmor(FindInventory("BasicArmor"));
			if (uarmor)
			{
				int ignore;
				uarmor.AbsorbDamage(damage,damagetype,ignore);
				damage = 0;
			}
		}
		
		return Super.TakeSpecialDamage(inflictor, source, damage, damagetype);
	}
	
	void SetTilt(bool left, bool right)
	{
		if (left && !right) {desiredTilt = -maxtilt;}
		else if (right && !left) {desiredTilt = maxtilt;}
		else {desiredTilt = 0;}
		if(tilt < desiredTilt) {tilt += 0.45;}
		if(tilt > desiredTilt) {tilt -= 0.45;}
		A_SetRoll(tilt - dmgTilt);//,SPF_INTERPOLATE);
		dmgTilt -= 0.45;
		if(dmgTilt<0) { dmgTilt = 0; }
		//A_Print("t: "..tilt);
	}
	
	void Timer()
	{
		if (tic <= 0) {tic = 35;}
		else {tic--;}
	}

	Default
	{
		Mass 100;
		PainChance 255;
		Gravity 1.0;
		Species "Player";
		Player.StartItem "QD_Shells", 25;
		Player.StartItem "QD_Shotgun";
		Player.StartItem "QD_Axe";
		Player.DisplayName "Quake Ranger";
		Player.SoundClass "QD_QuakePlayer";
	
		Player.WeaponSlot 1, "QD_Axe";
		Player.WeaponSlot 2, "QD_Shotgun";
		Player.WeaponSlot 3, "QD_DoubleBarrelShotgun";
		Player.WeaponSlot 4, "QD_LavaNailgun", "QD_Nailgun";
		Player.WeaponSlot 5, "QD_LavaSuperNailgun", "QD_SuperNailgun";
		Player.WeaponSlot 6, "QD_ProximityLauncher", "QD_MultiGrenadeLauncher", "QD_GrenadeLauncher";
		Player.WeaponSlot 7, "QD_MultiRocketLauncher", "QD_RocketLauncher";
		Player.WeaponSlot 8, "QD_PlasmaThunderbolt", "QD_Thunderbolt";
		Player.WeaponSlot 9, "QD_LaserCannon";
		Player.WeaponSlot 0, "QD_Mjolnir";
	}
	
	States
	{
	Spawn:
		PLAY A -1;
		Loop;
	See:
		PLAY ABCD 4;
		Loop;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 6 BRIGHT;
		Goto Missile;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
	Death:
		PLAY H 0 A_PlayerSkinCheck("AltSkinDeath");
	Death1:
		PLAY H 10;
		PLAY I 10 A_PlayerScream();
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 0 A_PlayerSkinCheck("AltSkinXDeath");
	XDeath1:
		PLAY O 5;
		PLAY P 5 A_XScream();
		PLAY Q 5 A_NoBlocking();
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
	AltSkinDeath:
		PLAY H 6;
		PLAY I 6 A_PlayerScream();
		PLAY JK 6;
		PLAY L 6 A_NoBlocking();
		PLAY MNO 6;
		PLAY P -1;
		Stop;
	AltSkinXDeath:
		PLAY Q 5 A_PlayerScream();
		PLAY R 0 A_NoBlocking();
		PLAY R 5 A_SkullPop();
		PLAY STUVWX 5;
		PLAY Y -1;
		Stop;
	}
}
