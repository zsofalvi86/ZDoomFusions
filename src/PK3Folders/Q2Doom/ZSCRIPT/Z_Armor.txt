Class PPE_Q2ArmorBonus : ArmorBonus
{
	bool nrg;
	Default
	{
		Inventory.PickupSound "items/armor1";
		Inventory.Icon "2ARMA0";
		Inventory.PickupMessage "$GOTSHARD";
		Armor.SavePercent 30;
		Armor.SaveAmount 2;
		Armor.MaxSaveAmount 200;
	}
	
	States
	{
	Spawn:
		ARSD A -1;
		Stop;
	}
	
	Override void AbsorbDamage(int damage, Name damageType, out int newdamage)
	{
		if (nrg) { newdamage = damage * 1; nrg = false; }
		else {Super.AbsorbDamage(damage,damageType,newdamage);}
	}
	
	Override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (inflictor != null && inflictor.GetClassName() == "ArachnotronPlasma") //|| damageType == )
		{ nrg = true;}
		else {Super.ModifyDamage(damage,damageType,newdamage,passive,inflictor,source,flags);}
	}
}

Class PPE_Q2ArmorPickup : CustomInventory
{
	Default
	{
		+INVENTORY.AUTOACTIVATE; +INVENTORY.ISARMOR;
		Radius 20; Height 16;
	}
	
	Action void GiveArmor(Actor to, name armortype, int amount)
	{
		GiveInventory(armortype,amount);
		//for (int i=0; i<amount; i++)
		//{
		//	to.GiveInventory(armortype,1);
		//}
	}
}

Class PPE_Q2GreenArmor : PPE_Q2ArmorPickup
{
	Default
	{
		Inventory.PickupSound "items/armor2";
		Inventory.Icon "2ARMA0";
		Inventory.PickupMessage "$GOTARMOR1";
	}
	
	Action bool GetArmor()
	{
		let uarmor = BasicArmor(FindInventory("BasicArmor"));
		if (uarmor != null)
		{
			//console.printf("%s%s%i", "uarmor:", uarmor.ArmorType, uarmor.amount);
			if (uarmor.ArmorType == "PPE_Q2ArmorBonus" || uarmor.ArmorType == "PPE_Q2GreenArmorArmor")
			{
				if (uarmor.Amount >= 50) { return false; }
				else { GiveInventory("PPE_Q2GreenArmorBonus",25); return true; }
			}
			if (uarmor.ArmorType == "PPE_Q2YellowArmorArmor")
			{
				if (uarmor.Amount >= 100) { return false; }
				else { GiveInventory("PPE_Q2YellowArmorBonus",round(25*0.3)); return true; }
			}
			if (uarmor.ArmorType == "PPE_Q2RedArmorArmor")
			{
				if (uarmor.Amount >= 200) { return false; }
				else { GiveInventory("PPE_Q2RedArmorBonus",round(25*0.3*0.6)); return true; }
			}
		}
		GiveInventory("PPE_Q2GreenArmorArmor",1);
		return true;
	}
	
	States
	{
	Spawn:
		2ARM A -1;
		Stop;
	Pickup:
		TNT1 A 0 GetArmor();
		Stop;
	/*Pickup:
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2ArmorBonus", "Terminate", 50)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2GreenArmorArmor", "Terminate", 50)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2YellowArmorArmor", "Terminate", 100)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2RedArmorArmor", "Terminate", 200)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2ArmorBonus", "GiveArmorBonus", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2GreenArmorArmor", "GiveArmorBonus", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2YellowArmorArmor", "GiveArmorBonusYellow", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2RedArmorArmor", "GiveArmorBonusRed", 1)
		goto SetArmor
	GiveArmorBonus:
		TNT1 A 0 A_GiveInventory("PPE_Q2GreenArmorBonus")
		Stop
	GiveArmorBonusYellow:
		TNT1 A 0 A_GiveInventory("PPE_Q2GreenArmorBonusYellow")
		Stop
	GiveArmorBonusRed:
		TNT1 A 0 A_GiveInventory("PPE_Q2GreenArmorBonusRed")
		Stop
	SetArmor:
		TNT1 A 0 A_GiveInventory("PPE_Q2GreenArmorArmor")
		Stop
	Terminate:
		TNT1 A 0
		Fail*/
	}
}

Class PPE_Q2YellowArmor : PPE_Q2ArmorPickup // actual pickup
{
	Default
	{
		Inventory.PickupSound "items/armor2";
		Inventory.Icon "2ARMB0";
		Inventory.PickupMessage "$GOTARMOR2";
	}
	
	Action bool GetArmor()
	{
		let uarmor = BasicArmor(FindInventory("BasicArmor"));
		if (uarmor != null)
		{
			if (uarmor.ArmorType == "PPE_Q2ArmorBonus" || uarmor.ArmorType == "PPE_Q2GreenArmorArmor")
			{
				let mem = uarmor.Amount; 
				//TakeInventory("PPE_Q2ArmorBonus",255); TakeInventory("PPE_Q2GreenArmorArmor",255);
				uarmor.Amount = 0;
				GiveInventory("PPE_Q2YellowArmorArmor",1);
				GiveInventory("PPE_Q2YellowArmorBonus",round(mem*0.3)); return true;
			}
			if (uarmor.ArmorType == "PPE_Q2YellowArmorArmor")
			{
				if (uarmor.Amount >= 100) { return false; }
				else { GiveInventory("PPE_Q2YellowArmorBonus",50); return true; }
			}
			if (uarmor.ArmorType == "PPE_Q2RedArmorArmor")
			{
				if (uarmor.Amount >= 200) { return false; }
				else { GiveInventory("PPE_Q2RedArmorBonus",50*0.6); return true; }
			}
		}
		GiveInventory("PPE_Q2YellowArmorArmor",1);
		return true;
	}
	
	States
	{
	Spawn:
		2ARM B -1;
		Stop;
	Pickup:
		TNT1 A 0 GetArmor();
		Stop;
	/*Pickup:
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2ArmorBonus", "Terminate", 100)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2GreenArmorArmor", "Terminate", 100)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2YellowArmorArmor", "Terminate", 100)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2RedArmorArmor", "Terminate", 200)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2ArmorBonus", "SetArmor", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2GreenArmorArmor", "SetArmor", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2YellowArmorArmor", "SetArmor", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2RedArmorArmor", "GiveArmorBonusRed", 1)
		goto SetArmor
	GiveArmorBonus:
		TNT1 A 0 A_GiveInventory("PPE_Q2YellowArmorBonus")
		Stop
	GiveArmorBonusRed:
		TNT1 A 0 A_GiveInventory("PPE_Q2YellowArmorBonusRed")
		Stop
	SetArmor:
		TNT1 A 0 A_GiveInventory("PPE_Q2YellowArmorArmor")
		Stop
	Terminate:
		TNT1 A 0
		Fail*/
	}
}

Class PPE_Q2RedArmor : PPE_Q2ArmorPickup // actual pickup
{
	Default
	{
		Inventory.PickupSound "items/armor3";
		Inventory.Icon "2ARMC0";
		Inventory.PickupMessage "$GOTARMOR3";
	}
	
	Action bool GetArmor()
	{
		let uarmor = BasicArmor(FindInventory("BasicArmor"));
		if (uarmor != null)
		{
			if (uarmor.ArmorType == "PPE_Q2ArmorBonus" || uarmor.ArmorType == "PPE_Q2GreenArmorArmor")
			{
				let mem = uarmor.Amount; 
				TakeInventory("PPE_Q2ArmorBonus",255); TakeInventory("PPE_Q2GreenArmorArmor",255);
				GiveInventory("PPE_Q2RedArmorArmor",1);
				GiveInventory("PPE_Q2RedArmorBonus",round(mem*0.3*0.6)); return true;
			}
			if (uarmor.ArmorType == "PPE_Q2YellowArmorArmor")
			{
				let mem = uarmor.Amount; 
				//TakeInventory("PPE_Q2YellowArmorArmor",255);
				uarmor.Amount = 0;
				GiveInventory("PPE_Q2RedArmorArmor",1);
				GiveInventory("PPE_Q2RedArmorBonus",round(mem*0.6)); return true;
			}
			if (uarmor.ArmorType == "PPE_Q2RedArmorArmor")
			{
				if (uarmor.Amount >= 200) { return false; }
				else { GiveInventory("PPE_Q2RedArmorBonus",100); return true; }
			}
		}
		GiveInventory("PPE_Q2RedArmorArmor",1);
		return true;
	}
	
	States
	{
	Spawn:
		2ARM C -1;
		Stop;
	Pickup:
		TNT1 A 0 GetArmor();
		Stop;
	/*Pickup:
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2ArmorBonus", "Terminate", 200)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2GreenArmorArmor", "Terminate", 200)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2YellowArmorArmor", "Terminate", 200)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2RedArmorArmor", "Terminate", 200)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2ArmorBonus", "CombineGreen", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2GreenArmorArmor", "CombineGreen", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2YellowArmorArmor", "CombineYellow", 1)
		TNT1 A 0 A_JumpIfArmorType("PPE_Q2RedArmorArmor", "GiveArmorBonus", 1)
		goto SetArmor
	CombineBonus:
		TNT1 A 0 A_SetInventory("PPE_ArmorMemory",countinv(PPE_Q2ArmorBonus)*0.18)
		Goto Combine
	CombineGreen:
		TNT1 A 0 A_SetInventory("PPE_ArmorMemory",countinv(PPE_Q2GreenArmorArmor)*0.18)
		Goto Combine
	CombineYellow:
		TNT1 A 0 A_SetInventory("PPE_ArmorMemory",countinv(PPE_Q2YellowArmorArmor)*0.6)
		Goto Combine
	Combine:
		TNT1 A 0 A_GiveInventory("PPE_Q2RedArmorArmor")
		TNT1 A 0 A_GiveInventory("PPE_Q2RedArmorBonus",countinv(PPE_ArmorMemory))
		TNT1 A 0 A_SetInventory("PPE_ArmorMemory",0)
		Stop
	GiveArmorBonus:
		TNT1 A 0 A_GiveInventory("PPE_Q2RedArmorBonus",100)
		Stop
	SetArmor:
		TNT1 A 0 A_GiveInventory("PPE_Q2RedArmorArmor")
		Stop
	Terminate:
		TNT1 A 0
		Fail*/
	}
}

Class PPE_Q2ArmorArmorBonus : ArmorBonus
{
	Default
	{
		-COUNTITEM;
		Armor.SavePercent 30;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 200;
		Inventory.PickupMessage ""; Inventory.PickupSound "";
	}
}

Class PPE_Q2GreenArmorBonus : PPE_Q2ArmorArmorBonus
{
	Default
	{
		Armor.SavePercent 30;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 50;
		Inventory.Icon "2ARMA0";
	}
}

Class PPE_Q2YellowArmorBonus : PPE_Q2ArmorArmorBonus
{
	Default
	{
		Armor.SavePercent 60;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 100;
		Inventory.Icon "2ARMB0";
	}
}

Class PPE_Q2RedArmorBonus : PPE_Q2ArmorArmorBonus
{
	Default
	{
		Armor.SavePercent 80;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 200;
		Inventory.Icon "2ARMC0";
	}
}

Class PPE_Q2GreenArmorArmor : BasicArmorPickup
{
	bool nrg;
	Default
	{
		Inventory.PickupSound "items/armor2";
		Armor.SavePercent 30;
		Armor.SaveAmount 25;
		Inventory.Icon "2ARMA0";
	}
	
	States
	{
	Spawn:
		2ARM A -1;
		Stop;
	}
	
	Override void AbsorbDamage(int damage, Name damageType, out int newdamage)
	{
		if (nrg) { newdamage = damage * 1; nrg = false; }
		else {Super.AbsorbDamage(damage,damageType,newdamage);}
	}
	
	Override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (inflictor != null && inflictor.GetClassName() == "ArachnotronPlasma") //|| damageType == )
		{ nrg = true;}
		else {Super.ModifyDamage(damage,damageType,newdamage,passive,inflictor,source,flags);}
	}
}

Class PPE_Q2YellowArmorArmor : BasicArmorPickup
{
	bool nrg;
	Default
	{
		Inventory.PickupSound "items/armor2";
		Armor.SavePercent 60;
		Armor.SaveAmount 50;
		Inventory.Icon "2ARMB0";
		Inventory.PickupMessage "$GOTARMOR2";
	}
	
	States
	{
	Spawn:
		2ARM B -1;
		Stop;
	}
	
	Override void AbsorbDamage(int damage, Name damageType, out int newdamage)
	{
		if (nrg) { newdamage = damage * 0.3333; nrg = false; }
		else {Super.AbsorbDamage(damage,damageType,newdamage);}
	}
	
	Override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (inflictor != null && inflictor.GetClassName() == "ArachnotronPlasma") //|| damageType == )
		{ nrg = true;}
		else {Super.ModifyDamage(damage,damageType,newdamage,passive,inflictor,source,flags);}
	}
}

Class PPE_Q2RedArmorArmor : BasicArmorPickup
{
	bool nrg;
	Default
	{
		Inventory.PickupSound "items/armor3";
		Armor.SavePercent 80;
		Armor.SaveAmount 100;
		Inventory.Icon "2ARMC0";
		Inventory.PickupMessage "$GOTARMOR3";
	}
	
	States
	{
	Spawn:
		2ARM C -1;
		Stop;
	}
	
	Override void AbsorbDamage(int damage, Name damageType, out int newdamage)
	{
		if (nrg) { newdamage = damage * 0.6666; nrg = false; }
		else {Super.AbsorbDamage(damage,damageType,newdamage);}
	}
	
	Override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (inflictor != null && inflictor.GetClassName() == "ArachnotronPlasma") //|| damageType == )
		{ nrg = true;}
		else {Super.ModifyDamage(damage,damageType,newdamage,passive,inflictor,source,flags);}
	}
}