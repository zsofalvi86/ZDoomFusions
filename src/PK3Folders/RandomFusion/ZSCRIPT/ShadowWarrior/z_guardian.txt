Class PPE_GuardianHeadBall : PlasmaBall
{
	Override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{
		target.GiveInventory("PPE_SwOnFire",5);
		let inv = target.FindInventory("PPE_SwOnFire");
		if (inv) { inv.target = self.target; }
		return Super.DoSpecialDamage(target,damage,damagetype);
	}
	
	States
	{
	Spawn:
		GHFB ABCD 1 bright;
		Loop;
	Death:
		BMYP ABCDEF 2 bright;
		Stop;
	}
	
	Default
	{
		DamageFunction 10;
		SeeSound "";
		DeathSound "weapons/sw/head/impact";
		RenderStyle "Normal";
		+BLOODLESSIMPACT;
	}
}

Class PPE_GuardianHeadBallS0 : PPE_GuardianHeadBall
{	
	Default
	{
		DamageFunction 20;
	}
}

Class PPE_GuardianHeadBallS6 : PPE_GuardianHeadBall
{
	Override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{
		target.GiveInventory("PPE_SwOnFireS6",5);
		let inv = target.FindInventory("PPE_SwOnFireS6");
		if (inv) { inv.target = self.target; }
		return Super.DoSpecialDamage(target,damage,damagetype);
	}
	
	Default
	{
		DamageFunction 5;
	}
}

Class PPE_GuardianHeadFireCircle : Actor
{
	Override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{
		target.GiveInventory("PPE_SwOnFire",50);
		let inv = target.FindInventory("PPE_SwOnFire");
		if (inv) { inv.target = self.target; }
		self.bShootable = true;
		A_Die("Normal");
		return Super.DoSpecialDamage(target,damage,damagetype);
	}
	
	Action void A_TraceFireball()
	{
		FLineTraceData trc;
		if (!target || !target.LineTrace(target.AngleTo(self),target.Distance3D(self)+200,0,0,32,0,0,trc)) {return;}
		if (trc.HitActor && trc.HitType==TRACE_HitActor && trc.HitActor.bShootable && !trc.HitActor.bKilled) {DoMissileDamage(trc.HitActor);}
	}
	
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOTELEPORT;
		+CANNOTPUSH;
		+FORCEXYBILLBOARD;
		Radius 1;
		Height 1;
	}
}

Class PPE_GuardianHeadFireCircleS6 : PPE_GuardianHeadFireCircle
{
	Override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{
		target.GiveInventory("PPE_SwOnFireS6",50);
		let inv = target.FindInventory("PPE_SwOnFireS6");
		if (inv) { inv.target = self.target; }
		self.bShootable = true;
		A_Die("Normal");
		return Super.DoSpecialDamage(target,damage,damagetype);
	}
}

Class PPE_SwOnFire : Inventory
{
	Actor fireActor; int tic;
	override void DoEffect()
	{
		if (!fireActor)
		{
			fireActor = Spawn("PPE_SwFireActor",Vec3Offset(owner.pos.x,owner.pos.y + owner.radius*0.2,owner.pos.z + owner.height*0.2));
			fireActor.tracer = owner;
			//console.printf("%s", "spawnedFire");
		}
		
		if (tic <= 0) {tic += 3;}
		else {tic--;}
		if (tic <= 0)
		{
			if (target && owner)
			{
				if (owner.CountInv("PPE_SwOnFire") > 35)
				{
					DoMissileDamage(owner);
					owner.TakeInventory("PPE_SwOnFire",1);
				}
				if (owner.CountInv("PPE_SwOnFire") > 25)
				{
					DoMissileDamage(owner);
					owner.TakeInventory("PPE_SwOnFire",1);
				}
				if (owner.CountInv("PPE_SwOnFire") > 15)
				{
					DoMissileDamage(owner);
					owner.TakeInventory("PPE_SwOnFire",1);
				}
				if (owner.CountInv("PPE_SwOnFire") > 10)
				{
					DoMissileDamage(owner);
					owner.TakeInventory("PPE_SwOnFire",1);
				}
				if (owner.CountInv("PPE_SwOnFire") > 0)
				{
					DoMissileDamage(owner);
					owner.TakeInventory("PPE_SwOnFire",1);
				}
				else
				{
					if (fireActor) {fireActor.bShootable=true; fireActor.A_Die("Normal");}
				}
				//console.printf("%s%i", "fires:", owner.CountInv("PPE_OnFire"));
			}
		}
		super.DoEffect();
	}
	
	override void DetachFromOwner()
	{
		//console.printf("%s", "detached");
		if (owner.CountInv("PPE_SwOnFire") == 0 && fireActor) {fireActor.bShootable=true; fireActor.A_Die("Normal");}
		super.DetachFromOwner();
	}
	
	Default
	{
		DamageFunction 8;
		Inventory.MaxAmount 100;
		+BLOODLESSIMPACT;
	}
}

Class PPE_SwOnFireS6 : PPE_SwOnFire
{
	Default
	{
		DamageFunction 4;
	}
}

Class PPE_SwFireActor : Actor
{
	States
	{
	Spawn:
		GHFR QPO 2 bright A_Warp(AAPTR_TRACER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION,null,0.2,0.2);
	Loopy:
		GHFR ABCDEFGHIJKLMN 2 bright A_Warp(AAPTR_TRACER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION,null,0.2,0.2);
		TNT1 A 0 { if(!tracer) {return ResolveState("Death");} return ResolveState(null);}
		Loop;
	Death:
		GHFR OPQ 2 bright A_Warp(AAPTR_TRACER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION,null,0.2,0.2);
		Stop;
	}
	
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOTELEPORT;
		+CANNOTPUSH;
		+NODAMAGETHRUST;
		+NOINTERACTION;
		+CLIENTSIDEONLY;
	}
}