Class PPE_Spawner : CustomInventory
{
	Actor lastspawn;
	int it;
	
	Action void A_SpawnPermanent(class<Actor> type)
	{
		invoker.lastspawn = Spawn(type, invoker.pos);
		InitSpawnedItem(invoker.lastspawn,SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL);
		invoker.lastspawn.bDropped = false;
	}
	
	Action state A_JumpIfPickedUp(StateLabel st)
	{
		if(!invoker.lastspawn || invoker.lastspawn.bInvisible) {return ResolveState(st);} 
		return ResolveState(null);
	}
	
	Action void A_SetRepeat(int i)
	{
		invoker.it = i;
	}
	
	Action state A_Repeat(StateLabel st)
	{
		invoker.it--;
		if (invoker.it <= 0) {return ResolveState(null);}
		return ResolveState(st);
	}

	Default
	{
		+DONTGIB; 
		+NOTONAUTOMAP;
		+INVENTORY.QUIET;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "";
	}
}

Class PPE_WeaponSpawner : PPE_Spawner
{
	Override void PostBeginPlay()
	//Action void A_SpawnWeapon()
	{
		ACS_NamedExecuteWithResult("SetSpawn",13); //use WithResult otherwise it'll run in parellel
		let spawn = CallAcs("GetSpawn",13);
		
		let index = 0;
		let wcount = 0;
		//toucher.A_Print("Slot number "..SlotNumber.." - size "..toucher.player.weapons.SlotSize(SlotNumber));
		/*do
		{
			let type = toucher.player.weapons.GetWeapon(SlotNumber, index);
			let weap = Weapon(toucher.FindInventory(type,true));
			if (weap != null){wcount++;}
		} while(++index < toucher.player.weapons.SlotSize(SlotNumber))*/
		
		Super.PostBeginPlay();
	}
}