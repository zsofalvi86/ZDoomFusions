Class PPE_Spawner : CustomInventory
{
	Actor lastspawn;
	int it;
	
	Action void A_SpawnPermanent(class<Actor> type)
	{
		invoker.lastspawn = Spawn(type, invoker.pos);
		InitSpawnedItem(invoker.lastspawn,SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL);
		invoker.lastspawn.bDropped = false;
	}
	
	Action state A_JumpIfPickedUp(StateLabel st)
	{
		if(!invoker.lastspawn || invoker.lastspawn.bInvisible) {return ResolveState(st);} 
		return ResolveState(null);
	}
	
	Action void A_SetRepeat(int i)
	{
		invoker.it = i;
	}
	
	Action state A_Repeat(StateLabel st)
	{
		invoker.it--;
		if (invoker.it <= 0) {return ResolveState(null);}
		return ResolveState(st);
	}

	Default
	{
		+DONTGIB; 
		+NOTONAUTOMAP;
		+INVENTORY.QUIET;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "";
	}
}

Class PPE_DroppableSpawner : PPE_Spawner
{
	class<Inventory> asSpawn;
	Property SpawnAs: asSpawn;
	class<Inventory> asDrop;
	Property DropAs: asDrop;
	
	Override void PostBeginPlay()
	{
		if (!bDropped || (asDrop && asDrop.GetClassName() == GetClassName()) || !asDrop)
		{
			lastspawn = Spawn(asSpawn, pos);
			InitSpawnedItem(lastspawn,SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL);
			lastspawn.bDropped = bDropped;
			GoAwayAndDie();
		}
		else if (asDrop)
		{
			lastspawn = A_DropItem(asDrop);
			InitSpawnedItem(lastspawn,SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL);
			lastspawn.bDropped = bDropped;
			GoAwayAndDie();
		}
	}
}

Class PPE_WeaponSpawner : PPE_Spawner
{
	//PROPERTIES
	int spawnerId;
	Property SpawnerId: spawnerId;
	class<Inventory> asDrop;
	Property DropAs: asDrop;
	
	int depth;
	
	Override void PostBeginPlay()
	{
		if (!bDropped || (asDrop && asDrop.GetClassName() == GetClassName()) || !asDrop)
		{
			CVar debugcv = CVar.FindCVar('debug'); let debug = debugcv && debugcv.GetBool();
			
			ACS_NamedExecuteWithResult("SetSpawn",spawnerId); //use WithResult otherwise it'll run in parellel
			let spawn = CallAcs("GetSpawn",spawnerId);

			Array<PotentialSpawn> potentialSpawnList;

			for (int i = 0; i < AllActorClasses.Size(); i++)
			{
				let wclass = PPE_WeaponBase(GetDefaultByType(AllActorClasses[i]));
				if (wclass && wclass.CanSpawn(spawnerId,spawn))
				{
					let pspawn = new('PotentialSpawn');
					pspawn.weapontype = wclass.GetClass();
					pspawn.index = i;
					potentialSpawnList.Push(pspawn);
				}
			}
			
			Array<Class<PPE_WeaponBase> > spawnList;
			
			let depth = min(potentialSpawnList.Size()*4,50);
			let minrecents = depth*2;
			for (int i = 0; i < potentialSpawnList.Size(); i++)
			{
				let recents = CallAcs("RecentSpawns",potentialSpawnList[i].index,spawnerId,depth);
				potentialSpawnList[i].recentsvalue = recents;
				if (recents < minrecents) {minrecents = recents;}
			}
			
			let threshhold = minrecents + (depth / 5);
			if (debug) console.printf("%s %i - %i", "wspawner depth:", depth, threshhold);
			for (int k = 0; k < potentialSpawnList.Size(); k++)
			{
				let cpspawn = potentialSpawnList[k];
				if (debug) console.printf("%s %i - %i - %s", "wspawner:", cpspawn.recentsvalue, cpspawn.index, cpspawn.weapontype.GetClassName());
				if (cpspawn.recentsvalue < threshhold) {spawnList.Push(cpspawn.weapontype);}
			}
			
			if (spawnList.Size()>=1)
			{
				let rng = random(0,spawnList.Size()-1);
				if (debug) console.printf("%s %s", "wspawner result:", spawnList[rng].GetClassName());
					
				lastspawn = Spawn(spawnList[rng], pos);
				InitSpawnedItem(lastspawn,SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL);
				lastspawn.bDropped = bDropped;
				ACS_NamedExecuteWithResult("RegisterSpawn",AllActorClasses.Find(lastspawn.GetClass()),spawnerId);
				GoAwayAndDie();
				return;
			}
			if (debug) console.printf("%s - %i - %i %s", "wspawner:", spawnerId, spawn, "returned no items");
		}
		else if (asDrop)
		{
			lastspawn = A_DropItem(asDrop);//Spawn(asDrop);
			InitSpawnedItem(lastspawn,SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL);
			lastspawn.bDropped = bDropped;
			GoAwayAndDie();
		}
	}
}

Class PotentialSpawn
{
	Class<PPE_WeaponBase> weapontype;
	int index;
	int recentsvalue;
}