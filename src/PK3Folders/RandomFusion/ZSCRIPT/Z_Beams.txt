Mixin Class PPE_FlatBeam// : Actor
{
	Action void A_FlatBeam(class<Actor> beam, int range, int step = 24, int skipsteps = 3, bool pierce = false, bool copyTranslation = false)
	{
		int hgt = 32;
		
		FLineTraceData trc;
		if (pierce) { LineTrace(angle,range,pitch,TRF_THRUACTORS,hgt,0,0,trc); }
		else { LineTrace(angle,range,pitch,0,hgt,0,0,trc); }
		
		LineAttack(angle,range,pitch,0,"Normal","PPE_PainlessPuff",0);
		let bobdelta = invoker.owner.player.viewz - invoker.owner.pos.Z - invoker.owner.player.viewheight;
		let ownertranslation = invoker.owner.translation;
		
		for (int i=step*skipsteps; i<trc.distance; i+=step)
		{
			//console.printf("%s%d", "tpz:", target.pos.z);//console.printf("%s%d", "opz:", pos.z);//console.printf("%s%d", "idist:", (i/dist));
			//console.printf("%s%d", "idist:", (trc.distance));
			let poswithheight = Vec3Offset(0,0,hgt + bobdelta);
			let ppos = poswithheight + i * trc.HitDir;//Vec3Angle(i,angle,((trc.hitlocation.z-(pos.z+hgt))*(i/trc.distance))+hgt);
			
			//if (!CheckBlock(0,AAPTR_DEFAULT,ppos.x,ppos.y,ppos.z))
			//{
			let beamp1 = Spawn(beam,ppos);
			let beamp2 = Spawn(beam,ppos);
			beamp1.bFlatSprite = true;
			beamp1.pitch = pitch;
			beamp1.angle = angle;
			beamp2.bWallSprite = true;
			beamp2.bRollSprite = true;
			beamp2.angle = angle+90;
			beamp2.roll = -pitch-90;
			
			if (copyTranslation)
			{
				beamp1.translation = ownertranslation;
				beamp2.translation = ownertranslation;
			}
			
				//TNT1 A 0 A_SetAngle(angle+90)
				//TNT1 A 0 A_SetRoll(-pitch-90)
			//}
			//else {break;}
		}
	}
}

Mixin Class PPE_DirectedFlatBeam// : Actor
{
	void DirectedFlatBeam(class<Actor> beam, class<Actor> puff, Actor target, int range, bool pierce = false)
	{
		int step = 24;
		//double dist = Distance3d(target);
			
		let targetmidpos = target.Vec3Offset(0,0,target.height/2);
			
		let distf = Vec2to(target);
		double angle = AngleTo(target);
		
		double distz = targetmidpos.z - pos.z;
		double ddist = sqrt(distf.X*distf.X + distf.Y*distf.Y + distz*distz);
		double pitch = Normalize180(-asin(distz / ddist));
		
		FLineTraceData trc;
		if (pierce){ LineTrace(angle,range,pitch,TRF_THRUACTORS,0,0,0,trc); }
		else { LineTrace(angle,ddist,pitch,TRF_THRUACTORS,0,0,0,trc); }
		
		//target.TraceBleedAngle(10,angle,pitch);
		if (puff)
		{
			LineAttack(angle,range,pitch,0,"Normal",puff,0);
		}
			
		for (int i=step; i<trc.distance; i+=step)
		{
		//console.printf("%s%d", "tpz:", target.pos.z);//console.printf("%s%d", "opz:", pos.z);//console.printf("%s%d", "idist:", (i/dist));

			let bppos = pos + i * trc.HitDir;
			let beamp1 = Spawn(beam,bppos);
			let beamp2 = Spawn(beam,bppos);
			beamp1.bFlatSprite = true;
			beamp1.pitch = pitch;
			beamp1.angle = angle;
			beamp2.bWallSprite = true;
			beamp2.bRollSprite = true;
			beamp2.angle = angle+90;
			beamp2.roll = -pitch-90;
		}
	}
}

Mixin Class PPE_TravelingRings// : Actor
{
	int phase;
	
	Action void A_TravelingRings(class<Actor> ring, int range)
	{
		int hgt = 32; int step = 24; int ringstep = 6; int ringspeed = 12;
		
		if (invoker.phase > step*ringstep) { invoker.phase = 0; }
		else { invoker.phase+=ringspeed; }
		
		FLineTraceData trc;
		LineTrace(angle,range,pitch,0,hgt,0,0,trc);
		
		//LineAttack(angle,range,pitch,0,"Normal","PPE_PainlessPuff",0);
		let bobdelta = invoker.owner.player.viewz - invoker.owner.pos.Z - invoker.owner.player.viewheight;
		
		for (int i=step*2; i<trc.distance; i+=step)
		{
			let poswithheight = Vec3Offset(0,0,hgt + bobdelta);
			
			if (i%(step*ringstep) == 0)
			{
				let ringi = i+invoker.phase;
				let pposr = poswithheight + ringi * trc.HitDir;//Vec3Angle(ringi,angle,((trc.hitlocation.z-(pos.z+hgt))*(ringi/trc.distance))+hgt);
				Spawn(ring,pposr);
			}
		}
	}
}

Mixin Class PPE_SpriteBeam// : Actor
{
	Action void A_SpriteBeam(class<Actor> beam, int range, int step = 24, int skipsteps = 3, bool pierce = false, bool copyTranslation = false)
	{
		int hgt = 32;
		
		FLineTraceData trc;
		if (pierce) { LineTrace(angle,range,pitch,TRF_THRUACTORS,hgt,0,0,trc); }
		else { LineTrace(angle,range,pitch,0,hgt,0,0,trc); }
		//LineAttack(angle,range,pitch,0,"Normal","PPE_PainlessPuff",0);
		
		//A_FireBullets(0,0,1,(0),"PPE_PainlessPuff",FBF_NORANDOM,9000,"none",0);
		let bobdelta = invoker.owner.player.viewz - invoker.owner.pos.Z - invoker.owner.player.viewheight;
		let ownertranslation = invoker.owner.translation;
		
		for (int i=step*skipsteps; i<trc.distance; i+=step)
		{
			let poswithheight = Vec3Offset(0,0,hgt + bobdelta);
			let ppos = poswithheight + i * trc.HitDir;//Vec3Angle(i,angle,((trc.hitlocation.z-(pos.z+hgt))*(i/trc.distance))+hgt);
			
			let spot = Spawn(beam,ppos);
			if (copyTranslation)
			{
				spot.translation = ownertranslation;
			}
		}
	}
}

Mixin Class PPE_DirectedSpriteBeam// : Actor
{
	void DirectedSpriteBeam(class<Actor> beam, class<Actor> puff, Actor target, int range, bool pierce = false)
	{
		int step = 24;
		//double dist = Distance3d(target);
			
		let targetmidpos = target.Vec3Offset(0,0,target.height/2);
			
		let distf = Vec2to(target);
		double angle = AngleTo(target);
		
		double distz = targetmidpos.z - pos.z;
		double ddist = sqrt(distf.X*distf.X + distf.Y*distf.Y + distz*distz);
		double pitch = Normalize180(-asin(distz / ddist));
		
		FLineTraceData trc;
		if (pierce){ LineTrace(angle,range,pitch,TRF_THRUACTORS,0,0,0,trc); }
		else { LineTrace(angle,ddist,pitch,TRF_THRUACTORS,0,0,0,trc); }
		
		//target.TraceBleedAngle(10,angle,pitch);
		if (puff)
		{
			LineAttack(angle,range,pitch,0,"Normal",puff,0);
		}
			
		for (int i=step; i<trc.distance; i+=step)
		{
		//console.printf("%s%d", "tpz:", target.pos.z);//console.printf("%s%d", "opz:", pos.z);//console.printf("%s%d", "idist:", (i/dist));

			let bppos = pos + i * trc.HitDir;
			let beamp1 = Spawn(beam,bppos);
		}
	}
}