Class PPE_BeamWeaponBase : PPE_WeaponBase
{
	int phase;
	
	Action void A_PlasmaBeam()
	{
		int hgt = 32; int step = 24; int ringstep = 6; int ringspeed = 12;
		
		if (invoker.phase > step*ringstep) { invoker.phase = 0; }
		else { invoker.phase+=ringspeed; }
		
		FLineTraceData trc;
		LineTrace(angle,9000,pitch,0,hgt,0,0,trc);
		
		LineAttack(angle,9000,pitch,0,"Normal","PPE_PainlessPuff",0);
		let bobdelta = invoker.owner.player.viewz - invoker.owner.pos.Z - invoker.owner.player.viewheight;
		
		for (int i=step*3; i<trc.distance; i+=step)
		{
			//console.printf("%s%d", "tpz:", target.pos.z);//console.printf("%s%d", "opz:", pos.z);//console.printf("%s%d", "idist:", (i/dist));
			//console.printf("%s%d", "idist:", (trc.distance));
			let poswithheight = Vec3Offset(0,0,hgt + bobdelta);
			let ppos = poswithheight + i * trc.HitDir;//Vec3Angle(i,angle,((trc.hitlocation.z-(pos.z+hgt))*(i/trc.distance))+hgt);
			
			if (i%(step*ringstep) == 0)
			{
				let ringi = i+invoker.phase;
				let pposr = poswithheight + ringi * trc.HitDir;//Vec3Angle(ringi,angle,((trc.hitlocation.z-(pos.z+hgt))*(ringi/trc.distance))+hgt);
				Spawn("PPE_PlasmaRing",pposr);
			}
			//if (!CheckBlock(0,AAPTR_DEFAULT,ppos.x,ppos.y,ppos.z))
			//{
			let beamp1 = Spawn("PPE_PlasmaBeamTrail",ppos);
			let beamp2 = Spawn("PPE_PlasmaBeamTrail",ppos);
			beamp1.bFlatSprite = true;
			beamp1.pitch = pitch;
			beamp1.angle = angle;
			beamp2.bWallSprite = true;
			beamp2.bRollSprite = true;
			beamp2.angle = angle+90;
			beamp2.roll = -pitch-90;
			
				//TNT1 A 0 A_SetAngle(angle+90)
				//TNT1 A 0 A_SetRoll(-pitch-90)
			//}
			//else {break;}
		}
	}
	
	Action void A_LightningBeam(int range)
	{
		int hgt = 32; int step = 24;
		
		FLineTraceData trc;
		LineTrace(angle,range,pitch,0,hgt,0,0,trc);
		LineAttack(angle,range,pitch,0,"Normal","PPE_PainlessPuff",0);
		
		//A_FireBullets(0,0,1,(0),"PPE_PainlessPuff",FBF_NORANDOM,9000,"none",0);
		let bobdelta = invoker.owner.player.viewz - invoker.owner.pos.Z - invoker.owner.player.viewheight;
		
		for (int i=step*3; i<trc.distance; i+=step)
		{
			let poswithheight = Vec3Offset(0,0,hgt + bobdelta);
			let ppos = poswithheight + i * trc.HitDir;//Vec3Angle(i,angle,((trc.hitlocation.z-(pos.z+hgt))*(i/trc.distance))+hgt);
			
			Spawn("PPE_LightningTrail",ppos);
		}
	}
}

Class PPE_TrailBaseP : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOTELEPORT;
		+CANNOTPUSH;
		+NODAMAGETHRUST;
		+NOINTERACTION;
		+CLIENTSIDEONLY;
		+FORCEXYBILLBOARD;
		Radius 1;
		Height 1;
	}
}

Class PPE_PlasmaBeamTrail : PPE_TrailBaseP
{
	States
	{
  	Spawn:
		TNT1 A 0;
    	PBMB A 1 bright;
		Stop;
	}
}

Class PPE_PlasmaRing : PPE_TrailBaseP
{
	States
	{
  	Spawn:
		TNT1 A 0;
    	PBMR A 1 bright;
		Stop;
	}
}