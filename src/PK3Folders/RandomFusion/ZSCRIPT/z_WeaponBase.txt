Class PPE_WeaponBaseBase : Weapon abstract
{	
	mixin PPE_LongUseable; // to allow overriding virtuals
}

Class PPE_WeaponBase : PPE_WeaponBaseBase abstract
{	
	States
	{
	Select:
	Deselect:
	Ready:
		TNT1 A 0 A_Overlay(-3,"KickOverlay",false);
		TNT1 A 0 A_Jump(256,"Ready.Ready");
	KickOverlay:
    	TNT1 A 1
		{
			tracer = null;
			If(invoker.owner)
			If(invoker.owner.CheckProximity("PPE_ActionFigureMonster",64,1,CPXF_CHECKSIGHT|CPXF_SETTRACER|CPXF_CLOSEST) ||
			invoker.owner.CheckProximity("PPE_ActionFigurePlayer",64,1,CPXF_CHECKSIGHT|CPXF_SETTRACER|CPXF_CLOSEST))
			{
				if (tracer.GetRenderStyle() == STYLE_None) {return ResolveState(null);}
				else {return ResolveState("Stomp");}
			}
			If(invoker.owner.CheckProximity("PPE_FrozenMonster",64,1,CPXF_CHECKSIGHT|CPXF_SETTRACER|CPXF_CLOSEST) ||
			invoker.owner.CheckProximity("PPE_FrozenPlayer",64,1,CPXF_CHECKSIGHT|CPXF_SETTRACER|CPXF_CLOSEST))
			{
				return ResolveState("FaceQuickKick");
			}
			If((GetPlayerInput(INPUT_BUTTONS) & BT_USE) && invoker.owner.CheckIfTargetInLOS(40,JLOSF_COMBATANTONLY|JLOSF_NOAUTOAIM|JLOSF_DEADNOJUMP,100))
			{
				return ResolveState("QuickKick");
			}
			return ResolveState(null);
		}
    	Loop;
	Fire:
	FaceQuickKick:
		TNT1 A 1 A_Face(tracer,40,55);
		TNT1 A 1 A_Face(tracer,40,55);
		TNT1 A 1 A_Face(tracer);
	QuickKick:
		DKIK C 1 offset(-102,44-32);
		DKIK C 1 offset(-94,38-32);
		DKIK C 1 offset(-86,32-32);
		DKIK D 1 offset(-43,36-32);
		DKIK D 1 offset(-35,32-32);
		TNT1 A 0 {if (tracer) {A_Face(tracer);}}
		TNT1 A 0 A_FireBullets(0,0,1,(10),"PPE_KickPuff",FBF_NORANDOM,100);
		DKIK D 2;
		DKIK D 1 offset(-43,36-32);
		DKIK C 1 offset(-86,32-32);
		DKIK C 1 offset(-94,38-32);
		DKIK C 1 offset(-102,44-32);
		TNT1 A 4;
		//TNT1 A 0 A_ReFire("QuickKick") // Do not refire, it picks up PRIMARY and derails the weapon
		Goto KickOverlay;
	Stomp:
		TNT1 AA 1 A_FocusTracer(true);
		TNT1 AA 1 A_FocusTracer();
		DKIK C 1 offset(-102,44-32) A_FocusTracer();
		DKIK C 1 offset(-94,38-32) A_FocusTracer();
		DKIK C 1 offset(-86,32-32) A_FocusTracer();
		DKIK D 1 offset(-43,36-32) A_FocusTracer();
		DKIK D 1 offset(-35,32-32) A_FocusTracer();
		TNT1 A 0 A_DamageTracer (9999,"Kick",DMSS_KILL,"PPE_ActionFigureMonster");
		TNT1 A 0 A_FireBullets(0,0,1,(0),"PPE_KickPuff",FBF_NORANDOM,100);
		DKIK D 1 offset(-33,38-32) A_FocusTracer();
		DKIK D 1 offset(-31,42-32) A_FocusTracer();
		DKIK D 1 offset(-29,46-32) A_FocusTracer();
		DKIK D 1 offset(-31,42-32) A_FocusTracer();
		DKIK D 1 offset(-33,38-32) A_FocusTracer();
		DKIK D 1 offset(-37,38-32) A_FocusTracer();
		DKIK D 1 offset(-39,42-32) A_FocusTracer();
		DKIK D 1 offset(-41,46-32) A_FocusTracer();
		DKIK D 1 offset(-39,42-32) A_FocusTracer();
		DKIK D 1 offset(-37,38-32) A_FocusTracer();
		DKIK D 1 offset(-33,38-32) A_FocusTracer();
		DKIK D 1 offset(-31,42-32) A_FocusTracer();
		DKIK D 1 offset(-29,46-32) A_FocusTracer();
		DKIK D 1 offset(-31,42-32) A_FocusTracer();
		DKIK D 1 offset(-33,38-32) A_FocusTracer();
		DKIK D 1 offset(-43,36-32) A_FocusTracer();
		DKIK C 1 offset(-86,32-32) A_FocusTracer();
		DKIK C 1 offset(-94,38-32) A_ReleaseFocus(true);
		DKIK C 1 offset(-102,44-32) A_ReleaseFocus();
		TNT1 A 2;
		Goto KickOverlay;
	}
	
	mixin PPE_AmmoPickupLogic;
	
	//PROPERTIES
	class<Ammo> AmmoTypeAlt;
	Property AmmoTypeAlt: AmmoTypeAlt;
	
	int SpawnerId1; int SpawnNo1;
	int SpawnerId2; int SpawnNo2;
	int SpawnerId3; int SpawnNo3;
	int SpawnerId4; int SpawnNo4;
	int SpawnerId5; int SpawnNo5;
	Property SpawnerId1: SpawnerId1, SpawnNo1;
	Property SpawnerId2: SpawnerId2, SpawnNo2;
	Property SpawnerId3: SpawnerId3, SpawnNo3;
	Property SpawnerId4: SpawnerId4, SpawnNo4;
	Property SpawnerId5: SpawnerId5, SpawnNo5;
	
	private class<PPE_WeaponBase> SlotAlt1;
	private class<PPE_WeaponBase> SlotAlt2;
	private class<PPE_WeaponBase> SlotAlt3;
	Property SlotAlt1: SlotAlt1;
	Property SlotAlt2: SlotAlt2;
	Property SlotAlt3: SlotAlt3;
	
	string cvarname;
	Property EnableCvar: cvarname;
	
	int Up1; int Up2; int Up3; int Up4;
	Property Upgrades: Up1, Up2, Up3, Up4;
	
	//Fields
	int mode;
	int upgradelevel;
	bool instd;
	
	Override State GetDownState()
	{
		if (instd) {instd = false; return ResolveState("Deselect.Instant");}
		return super.GetDownState();
	}
	
	Action void A_QueueInstantDeselect()
	{
		invoker.instd = true;
	}
	
	Action void A_CheckForAmmo(int amnt)
	{
		if (invoker.Ammo1.Amount < amnt)
		{
			PlayerPawn(invoker.owner).PickNewWeapon(null);
		}
	}
	
	Action void A_ForceReload()
	{
		invoker.ReloadCounter = 1;
	}
	
	Action State A_CheckIfNoReload(statelabel noreload)
	{
		if (invoker.ReloadCounter == 0) { return ResolveState(noreload); }
		return ResolveState(null);
	}
	
	Action state A_JumpIfAltAmmo(statelabel alt)
	{
		if (invoker.AmmoType1 == invoker.AmmoTypeAlt) { return ResolveState(alt); }
		return ResolveState(null);
	}
	
	Action state A_JumpIfMode(int testmode, statelabel jumpto)
	{
		if (invoker.mode == testmode) { return ResolveState(jumpto); }
		return ResolveState(null);
	}
	
	Action state A_JumpIfRegularAmmo(statelabel notalt)
	{
		if (invoker.AmmoType1 == invoker.Default.AmmoType1) { return ResolveState(notalt); }
		return ResolveState(null);
	}
	
	Action state A_JumpIfOnlyOtherAmmo(statelabel alt)
	{
		if(invoker.HasAmmo(invoker.AmmoType1,invoker.AmmoUse1)) { return ResolveState(null); }
		let NewAmmo = invoker.GetOtherAmmoType();
		if(invoker.HasAmmo(NewAmmo,invoker.AmmoUse1)) { return ResolveState(alt); }
		return ResolveState(null);
	}
	
	Action void A_SwapMode(int newmode)
	{
		invoker.mode = newmode;
	}
	
	Action void A_SwapIfOnlyOtherAmmo()
	{
		if(invoker.HasAmmo(invoker.AmmoType1,invoker.AmmoUse1)) { return; }
		A_SwapAmmo();
	}
	
	Action void A_SwapAmmo()
	{
		let NewAmmo = invoker.GetOtherAmmoType();
		if(invoker.HasAmmo(NewAmmo,invoker.AmmoUse1))
		{
			invoker.AmmoType1 = NewAmmo;
			invoker.Ammo1 = invoker.AddAmmo(invoker.Owner,invoker.AmmoType1,0);
		}
	}
	
	Action void A_ChangeAmmoUse(int newval)
	{
		invoker.AmmoUse1 = newval;
	}
	
	Action void A_ChangeAmmoUse2(int newval)
	{
		invoker.AmmoUse2 = newval;
	}
	
	//Upgrades
	
	Action state A_JumpIfUpgrade(int reqlevel, statelabel jumpto)
	{
		if (invoker.upgradelevel >= reqlevel) { return ResolveState(jumpto); }
		return ResolveState(null);
	}
	
	int Upgrade(int amount)
	{
		int tookUpg = 0;
		switch(upgradelevel)
		{
			case 0: if (Up1>0 && Up1<=amount) {tookUpg=Up1; upgradelevel=1;}
			case 1: if (Up2>0 && Up2<=amount) {tookUpg=Up2; upgradelevel=2;}
			case 2: if (Up3>0 && Up3<=amount) {tookUpg=Up3; upgradelevel=3;}
			case 3: if (Up4>0 && Up4<=amount) {tookUpg=Up4; upgradelevel=4;}
		}
		return tookUpg;
	}
	
	//Look functions
	Action void A_FocusTracer(bool pitchdown = false)
	{
		int pitchd = 90;
		if (pitchdown) {pitch += 10; pitchd = 270;}
		A_Face(tracer,40,pitchd,0,0,FAF_BOTTOM);
		A_ScaleVelocity(0);
		tracer.A_SetSpeed(0);
	}
	
	Action void A_ReleaseFocus(bool resetSpeed = false)	
	{
		if (resetSpeed && tracer) 
		{
			tracer.A_SetSpeed(GetDefaultSpeed(tracer.GetClass()));
			invoker.Owner.player.centering = true;
		}
		//pitch -= 10;
	}
	
	//AmmoType
	Class<Ammo> GetOtherAmmoType()
	{
		if (AmmoType1 == AmmoTypeAlt) { return Default.AmmoType1; }
		else { return AmmoTypeAlt; }
	}
	
	bool HasAmmo(Class<Ammo> ammotype, int amnt)
	{
		let ammoitem = Ammo(owner.FindInventory(ammotype));
		return ammoitem && ammoitem.Amount >= amnt;
	}
	
	//Overrides
	Override bool LongPressUse(Actor toucher)
	{
		if (!toucher || !toucher.player) {return false;}
		
		let readygun = PPE_WeaponBase(toucher.player.ReadyWeapon);
		
		if (readygun)
		{
			let readygunSlot = readygun.SlotNumber;
			
			let thisWeap = Weapon(toucher.FindInventory(self.GetClass(),false));
			let slotAltWeap1 = Weapon(toucher.FindInventory(SlotAlt1,false));
			let slotAltWeap2 = Weapon(toucher.FindInventory(SlotAlt2,false));
			let slotAltWeap3 = Weapon(toucher.FindInventory(SlotAlt3,false));
			
			if (thisWeap || slotAltWeap1 || slotAltWeap2 || slotAltWeap3)
			{
				Touch(toucher);
				return true;
			}
		
			let thisSlotF = SlotFull(toucher, SlotNumber);
			let altSlot1F = SlotAlt1 && SlotFull(toucher, GetDefaultByType(SlotAlt1).SlotNumber);
			let altSlot2F = SlotAlt2 && SlotFull(toucher, GetDefaultByType(SlotAlt2).SlotNumber);
			let altSlot3F = SlotAlt3 && SlotFull(toucher, GetDefaultByType(SlotAlt3).SlotNumber);
			
			if (readygunSlot == SlotNumber)
			{
				if (thisSlotF) {toucher.A_DropInventory(readygun.GetClass());}
				Touch(toucher);
			}
			if (SlotAlt1 && readygunSlot == GetDefaultByType(SlotAlt1).SlotNumber)
			{
				if (altSlot1F) {toucher.A_DropInventory(readygun.GetClass());}
				let altItem1 = Weapon(Spawn(SlotAlt1,pos));
				altItem1.Touch(toucher);
				GoAwayAndDie();
			}
			if (SlotAlt2 && readygunSlot == GetDefaultByType(SlotAlt2).SlotNumber)
			{
				if (altSlot2F) {toucher.A_DropInventory(readygun.GetClass());}
				let altItem2 = Weapon(Spawn(SlotAlt1,pos));
				altItem2.Touch(toucher);
				GoAwayAndDie();
			}
			if (SlotAlt3 && readygunSlot == GetDefaultByType(SlotAlt3).SlotNumber)
			{
				if (altSlot3F) {toucher.A_DropInventory(readygun.GetClass());}
				let altItem3 = Weapon(Spawn(SlotAlt1,pos));
				altItem3.Touch(toucher);
				GoAwayAndDie();
			}
			else
			{
				Touch(toucher);
			}
			//swapping = false;
		}
		return true;
	}
	
	override bool HandlePickup (Inventory item)
	{
		let oldammo = AmmoType1;
		AmmoType1 = Default.AmmoType1; // use DEFAULT and not current ammo type for pickup
		Ammo1 = AddAmmo(Owner,AmmoType1,0);
		let b = Super.HandlePickup(item);
		AmmoType1 = oldammo;
		Ammo1 = AddAmmo(Owner,AmmoType1,0);
		return b;
	}

	Override bool TryPickup(in out Actor toucher)
	{
		if (!toucher || !toucher.player) {return Super.TryPickup(toucher);}
		
		let thisWeap = Weapon(toucher.FindInventory(self.GetClass(),false));
		let slotAltWeap1 = Weapon(toucher.FindInventory(SlotAlt1,false));
		let slotAltWeap2 = Weapon(toucher.FindInventory(SlotAlt2,false));
		let slotAltWeap3 = Weapon(toucher.FindInventory(SlotAlt3,false));
		
		let thisSlotF = SlotFull(toucher, SlotNumber);
		let altSlot1F = SlotAlt1 && SlotFull(toucher, GetDefaultByType(SlotAlt1).SlotNumber);
		let altSlot2F = SlotAlt2 && SlotFull(toucher, GetDefaultByType(SlotAlt2).SlotNumber);
		let altSlot3F = SlotAlt3 && SlotFull(toucher, GetDefaultByType(SlotAlt3).SlotNumber);
		
		//if (SlotAlt)
		//{
		//	toucher.A_Print("trypickup wcount:"..wcount.." - this:"..thisWeap.." - alt:"..slotAltWeap1.." - altCl:"..Slotalt.GetClassName());
		//}
		if (thisSlotF || thisWeap || slotAltWeap1 || slotAltWeap2 || slotAltWeap3)
		{
			if (!thisWeap)
			{
				if (!slotAltWeap1 && !altSlot1F && PickUpAltClass(SlotAlt1, toucher)) { return true; }
				if (!slotAltWeap2 && !altSlot2F && PickUpAltClass(SlotAlt2, toucher)) { return true; }
				if (!slotAltWeap3 && !altSlot3F && PickUpAltClass(SlotAlt3, toucher)) { return true; }
			}
		
			if (PickupForAmmo2(toucher))
			{
				//toucher.A_Print("Slot "..SlotNumber.." full - ammo scavenged");
				// custom pickup logic
				bool localview = toucher.CheckLocalView();
				PrintPickupMessage(localview, PickupMessage());
				
				let oldsound = PickupSound;
				PickupSound = ActiveSound;
				PlayPickupSound (toucher.player.mo);
				PickupSound = oldsound;
				
				if (!bNoScreenFlash && toucher.player.playerstate != PST_DEAD)
				{
					toucher.player.bonuscount = BONUSADD;
				}
			}
			
			//toucher.A_Print("Slot "..SlotNumber.." full");}
			return false;
		}
		return Super.TryPickup(toucher);
	}
	
	Override String PickupMessage()
	{
		return Stringtable.Localize("$GOTWEAPONPRE")..GetTag()..Stringtable.Localize("$GOTWEAPONPOST");
	}
	
	protected bool SlotFull(Actor toucher, int slot)
	{
		if (!toucher || !toucher.player) {return false;}
		let index = 0;
		let wcount = 0;
		//toucher.A_Print("Slot number "..slot.." - size "..toucher.player.weapons.SlotSize(slot));
		do
		{
			let type = toucher.player.weapons.GetWeapon(slot, index);
			let weap = Weapon(toucher.FindInventory(type,false));
			if (weap != null){wcount++;}
		} while(++index < toucher.player.weapons.SlotSize(slot))
		return wcount >= 2;
	}
	
	protected bool PickUpAltClass(class<PPE_WeaponBase> altType, Actor toucher)
	{
		if (!altType) return false;
		let altItem = Weapon(Spawn(altType,pos));
		if (altItem)
		{
			if (altItem.TryPickup(toucher))
			{
				//toucher.A_Print("trypickup GI:"..altItem.GetClassName());
				GoAwayAndDie();
				return true;
			}
			altItem.GoAwayAndDie();
		}
		return false;
	}
	
	protected bool PickupForAmmo2(Actor pwner)
	{
		bool gotstuff = false;
		let ppwner = PlayerPawn(pwner);
		// Don't take ammo if the weapon sticks around.
		if (!ShouldStay() && pwner && pwner.player && ppwner)
		{
			int oldamount1 = 0; Ammo ammo1i = Ammo(pwner.FindInventory(AmmoType1));
			int oldamount2 = 0; Ammo ammo2i = Ammo(pwner.FindInventory(AmmoType2));
			if (ammo1i != NULL) oldamount1 = ammo1i.Amount;
			if (ammo2i != NULL) oldamount2 = ammo2i.Amount;

			AmmoGive1 -= AddExistingAmmoFlex(ammo1i, AmmoGive1);
			AmmoGive2 -= AddExistingAmmoFlex(ammo2i, AmmoGive2);
			if (ammo1i != NULL) gotstuff = oldamount1 != ammo1i.Amount;
			if (ammo2i != NULL) gotstuff |= oldamount2 != ammo2i.Amount;

			if (gotstuff)
			{
				bool localview = pwner.CheckLocalView();
				PrintPickupMessage(localview, PickupMessage());

				if (ammo1i != NULL && oldamount1 == 0)
				{
					ppwner.CheckWeaponSwitch(ammo1i.GetClass());
				}
				else if (ammo2i != NULL && oldamount2 == 0)
				{
					ppwner.CheckWeaponSwitch(ammo2i.GetClass());
				}
			}
		}
		return gotstuff;
	}
	
	virtual void WorldThingDied (WorldEvent e)
	{
	}
	
	virtual void WorldThingDamaged (WorldEvent e)
	{
	}
	
	bool IsAltSlot()
	{
		return self is SlotAlt1 || self is SlotAlt2 || self is SlotAlt3;
	}
	
	bool CanSpawn(int spawnerid, int spawnno)
	{
		CVar controlvar = CVar.FindCVar(cvarname);
		//console.printf("%s%s-%s-%i", "wbase:", GetClassName(),Super.GetClassName(), ans);
		return !IsAltSlot() &&
		(!controlvar || controlvar.GetBool()) &&
		(
		   SpawnerId1 == spawnerid && SpawnNo1 == spawnno ||
		   SpawnerId2 == spawnerid && SpawnNo2 == spawnno ||
		   SpawnerId3 == spawnerid && SpawnNo3 == spawnno ||
		   SpawnerId4 == spawnerid && SpawnNo4 == spawnno ||
		   SpawnerId5 == spawnerid && SpawnNo5 == spawnno
		);
	}

	Default
	{
		+WEAPON.NOALERT;
		+WEAPON.CHEATNOTWEAPON;
		Weapon.BobRangeX 0.75;
		Weapon.BobRangeY 0.75;
		Weapon.BobSpeed 2.0;
	}
}