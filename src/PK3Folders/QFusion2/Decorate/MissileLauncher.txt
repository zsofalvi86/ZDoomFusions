actor PPE_MissileLauncher : RocketLauncher
{
	Weapon.SelectionOrder 2400
	Weapon.AmmoUse 1
	Weapon.AmmoGive 5
	Weapon.AmmoType "PPE_Rockets"
	Weapon.SlotNumber 7
	Weapon.UpSound "weapons/switch"
	Inventory.PickupSound "items/weapon2"
	Inventory.Pickupmessage "$GOT_PPE_ML"
	Tag "$TAG_PPE_ML"
	+NOAUTOFIRE
	+NOALERT
	+NOAUTOAIM
	States
	{
	Ready:
		Q2RG A 1
		{
			// A_WeaponReady's handling of firing is inferior, this lets the user fire both alt and normal at the same time
			A_WeaponReady(WRF_NOPRIMARY);
			If(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) 
			{
				return state("Fire");
			}
			return state(0);
		}
		TNT1 A 0 A_Overlay(2,"LaserCheck")
		TNT1 A 0 A_JumpIfInventory("PPE_MLLoad",0,"Ready")
		Goto LoadIdle
	LoadIdle:
		TNT1 A 0 A_PlaySound("weapons/rocket/reload",6)
		Q2RG AAAAAA 1 A_Overlay(2,"LaserCheck")
		TNT1 A 0 A_GiveInventory("PPE_MLLoad",1)
		Q2RG BBBCCCDDDEEEFFF 1 A_Overlay(2,"LaserCheck")
		Goto Ready
	Deselect:
		TNT1 A 0 A_Lower
		TNT1 A 0 A_Lower
		Q2RG A 1 A_Lower
		Loop
	Select:
		TNT1 A 0 A_SetInventory("PPE_MLLoad",3)
	SelLoop:
		TNT1 A 0 A_Raise
		TNT1 A 0 A_Raise
		Q2RG A 1 A_Raise
		Loop
	SlowFire:
		Q2RG AAAAAA 1 A_Overlay(2,"LaserCheck")
		TNT1 A 0 A_ReFire("Fire")
    	Goto Ready
	Fire:
		TNT1 A 0 A_JumpIfInventory("PowerSilencer",0,2)
		TNT1 A 0 A_AlertMonsters
		TNT1 A 0 A_GunFlash
		TNT1 A 0 A_TakeInventory("PPE_MLLoad",1)
		TNT1 A 0 A_FireCustomMissile("PPE_Q2Rocket",0,1,0,1,1,0)
		TNT1 A 0 A_PlaySound("weapons/rocket/fire2",1)
		TNT1 A 0 A_PlaySound("items/quad/use",2,CountInv("PowerQuadDamage"))
		Q2RF AABBCC 1 bright A_Overlay(2,"LaserCheck")
		TNT1 A 0 A_ReFire("FastFirePrep")
		Goto Load
	FastFirePrep:
		TNT1 A 0 A_JumpIfInventory("PPE_MLLoad",1,"FastFire")
		Goto Load
	FastFire:
		Q2RF DDEE 1 bright A_Overlay(2,"LaserCheck")
		Q2RG AA 1 A_Overlay(2,"LaserCheck")
		TNT1 A 0 A_ReFire("Fire")
		Q2RG AAA 1 A_Overlay(2,"LaserCheck")
    	Goto Ready
	Load:
		TNT1 A 0 A_PlaySound("weapons/rocket/reload",6)
		Q2RF DDEE 1 bright A_Overlay(2,"LaserCheck")
		Q2RG AA 1 A_Overlay(2,"LaserCheck")
		TNT1 A 0 A_GiveInventory("PPE_MLLoad",1)
		Q2RG BBBCCCDDDEEEFFF 1 A_Overlay(2,"LaserCheck")
		TNT1 A 0 A_ReFire("SlowFire")
    	Goto Ready
	Flash:
    	TNT1 A 1 A_Light1
		TNT1 AAAAAA 1 A_SetPitch(pitch-0.4)
		TNT1 A 0 A_Light2
		TNT1 AAA 1 A_SetPitch(pitch+0.8)
		Goto LightDone
	LaserCheck:
		TNT1 A 0
		{
			If(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)//32)
			{
				A_FireBullets(0,0,1,0,"PPE_LaserPointerML",FBF_NOFLASH|FBF_NORANDOM|FBF_NORANDOMPUFFZ);
			}
		}
		Stop
	Spawn:
		Q2RP A -1
		Stop
   }
}

actor PPE_Q2Rocket : PPE_SlowMissileBase
{
	Speed 22
	ProjectileKickBack 100
	Damage (16)
	DamageType "Quake2Rocket"
	Decal Scorch
	SeeSound ""
	DeathSound "weapons/rocket/explode3"
	Obituary "$OB_MPROCKET"
	+ROCKETTRAIL
	+FORCERADIUSDMG
	//+SEEKERMISSILE
	States
	{
	Spawn:
		TNT1 A 0
		TNT1 A 0 A_PlaySound("weapons/rocket/fly",6,1,1)
	Loopy:
		TNT1 A 0 A_CheckProximity("Seek","PPE_LaserPointerML",2048,1,CPXF_SETTRACER|CPXF_CLOSEST)
		MISL A 1 bright
		loop
	Seek:
		//TNT1 A 0 A_SpawnItem("DoomImpBall")
		TNT1 A 0 A_FaceTracer(5,5,0,0,FAF_BOTTOM)
		MISL A 1 bright A_ChangeVelocity(22*cos(pitch),0,-22*sin(pitch),CVF_RELATIVE|CVF_REPLACE)
		//MISL A 1 bright A_Tracer2
		//MISL A 1 bright A_SeekerMissile(5,20,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,0,0)
		Goto Loopy
	Death:
		TNT1 A 0 A_SpawnItem("PPE_RedQuakeExplo")
		TNT1 A 0 A_StopSound(6) // 8, 60, 52 - upscaled to match rocket
		TNT1 A 0 A_Explode(117,128,1,0,128)
		TNT1 A 0 A_Explode(101,128)
		TNT1 A 0 A_Quake(4,5,0,224,"")
		TNT1 A 0 A_Quake(2,6,0,512,"")
		TNT1 A 0 A_Quake(1,6,0,3072,"")
		BMXP A 4 bright
		BMXP BCDEF 3 bright
		Stop
	}
}

Actor PPE_LaserPointerML : BulletPuff
{
+ALWAYSPUFF
+PUFFONACTORS
+PAINLESS
+THRUGHOST
+BLOODLESSIMPACT
-ALLOWPARTICLES
-RANDOMIZE
+FORCEXYBILLBOARD
-ACTIVATEIMPACT
RenderStyle Normal
Alpha 1.0
Vspeed 0
States
  {
  Spawn:
	TNT1 A 0
    LAZG A 1 Bright
	//TNT1 A 3
	stop
  }
}

Actor PPE_MLLoad : Inventory
{
	Inventory.MaxAmount 3
}