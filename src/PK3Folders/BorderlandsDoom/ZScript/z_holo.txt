Class PPE_HoloDecoyGuy : Actor
{
	int tic;
	
	Override void Tick()
	{
		if (tic <= 0) {tic = 25;}
		else {tic--;}
		if (tic == 0)
		{
			A_Explode(1,10024,XF_NOTMISSILE,0,10024);
		}
		Super.Tick();
	}
	
	Override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{
		if (target && target.bIsMonster && target.OkayToSwitchTarget(self))
		{
			target.Target = self;
		}
		return 0;
	}
	
	Override void ApplyKickback(Actor inflictor, Actor source, int damage, double angle, Name mod, int flags){}//don't

	States
	{
	Spawn:
		"####" "#" 0;
		"####" "#" 0 A_CopySpriteFrame(AAPTR_TRACER,AAPTR_DEFAULT);
		"####" "#" 0 A_SetScale(0.5,0.5);
		"####" "#" 0 A_SetTranslucent(0.4);
		"####" "#" 1;
		"####" "#" 1 A_SetScale(0.6,0.6);
		"####" "#" 0 A_SetTranslucent(0.5);
		"####" "#" 1 A_SetScale(0.7,0.7);
		"####" "#" 0 A_SetTranslucent(0.6);
		"####" "#" 1 A_SetScale(0.8,0.8);
		"####" "#" 0 A_SetTranslucent(0.7);
		"####" "#" 1 A_SetScale(0.9,0.9);
		"####" "#" 0 A_SetTranslucent(0.8);
		"####" "#" 1 A_SetScale(1.0,1.0);
		"####" "#" 0 A_SetTranslucent(0.9);
	SpawnLoop:
		"####" "#" 1;
		Loop;
	Death:
		"####" "#" 0 A_SetScale(scale.x*0.98,scale.y*1.02);
		"####" "#" 1 A_FadeOut(0.15);
		Loop;
	}
	
	Default
	{
		Radius 16;
		Height 56;
		RenderStyle "Translucent";
		Alpha 0.9;
		+SHOOTABLE; +NOBLOOD; +NOBLOCKMAP;
		+FORCERADIUSDMG;
	}
}

Class PPE_HolodecoyBase : Inventory
{	
	Actor decoyGuy; bool inuse; double useTics;
	const ticPerInv = (60 * 35) / 100;
	
	override bool Use(bool pickup)
	{
		if (!inuse)
		{// + Vec3Angle(64,owner.angle)
			if (!decoyGuy)
			{
				FLineTraceData trc;
				if (owner.LineTrace(owner.angle,80,0,0,owner.player.viewheight,0,0,trc)) 
				{decoyGuy = Spawn("PPE_HoloDecoyGuy",trc.HitLocation - 17 * trc.HitDir);}
				else 
				{decoyGuy = Spawn("PPE_HoloDecoyGuy",owner.Vec3Angle(64,owner.angle));}
			}
			if (decoyGuy) 
			{
				inuse = true; 
				decoyGuy.Tracer = owner; 
				//owner.A_Print("dg: "..decoyGuy.Tracer);
				//decoyGuy.A_CopySpriteFrame(owner,AAPTR_DEFAULT);
				decoyGuy.angle = owner.angle;
			}
			else {return false;}
		}
		else
		{
			StopUse();
		}
		return true;
	}
	
	override void DoEffect()
	{
		//owner.A_Print("dg: "..decoyGuy);
		if (inUse)
		{
			if (useTics <= 0) {useTics += ticPerInv;}
			else {useTics--;}
			if (useTics <= 0)
			{
				owner.TakeInventory(GetClassName(), 1);
			}
		}
	}
	
	override void DetachFromOwner()
	{
		StopUse();
		super.DetachFromOwner();
	}
	
	void StopUse()
	{
		inuse = false;
		if (decoyGuy) 
		{
			decoyGuy.A_Die();
			decoyGuy = null;
		}
	}
}
